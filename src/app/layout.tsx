import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { useEffect, useState } from "react";
import { Sidebar } from "@/components/ui/sidebar";
import { Store } from "@/models/store.model";
import Header from "./manualComponents/header/Header";
import { useStore } from "@/store/useStore";
import mongoose from "mongoose";
import type { StoreDocument } from "@/store/useStore";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

interface Store {
  _id: string;
  location: string;
  utm_source: string;
  utm_term: string;
}

async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const storesResponse = await fetch(
    `${process.env.NEXT_PUBLIC_URL}/api/get-stores`,
    {
      method: "GET",
      cache: "no-store",
    }
  );
  const { stores } = await storesResponse.json();

  const storesBasicInfo = stores.map(
    (store: { location: string; utm_source: string; utm_term: string }) => ({
      location: store.location,
      utm_source: store.utm_source,
      utm_term: store.utm_term,
    })
  );

  const collectionsResponse = await fetch(
    `${process.env.NEXT_PUBLIC_URL}/api/get-collections-ticketslist`,
    {
      method: "GET",
      cache: "no-store",
    }
  );
  const { collections } = await collectionsResponse.json();

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Header />
        <div className="flex">
          <Sidebar stores={storesBasicInfo} collectionsTickets={collections} />
          <main className="flex-1 min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
            <div className="min-h-screen backdrop-blur-sm bg-black/20">
              <div className="relative min-h-screen overflow-x-hidden">
                <div className="absolute top-0 left-0 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl -translate-x-1/2 -translate-y-1/2"></div>
                <div className="absolute bottom-0 right-0 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl translate-x-1/2 translate-y-1/2"></div>
                {children}
              </div>
            </div>
          </main>
        </div>
      </body>
    </html>
  );
}

export default RootLayout;
