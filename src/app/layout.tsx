"use client";
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { useEffect, useState } from "react";
import { Sidebar } from "@/components/ui/sidebar";
import { Store } from "@/models/store.model";
import Header from "./manualComponents/header/Header";
import { useStore } from "@/store/useStore";
import mongoose from "mongoose";
import type { StoreDocument } from "@/store/useStore";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

interface Store {
  _id: string;
  location: string;
  utm_source: string;
  utm_term: string;
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { item, setItem } = useStore();

  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean | null>(true);

  if (isLoading) {
    <div>...chargement en cours</div>;
  }

  if (error) {
    <div>Erreur : {error}</div>;
  }

  const [stores, setStores] = useState<StoreDocument[]>([]);

  useEffect(() => {
    const fetchStores = async () => {
      try {
        const response = await fetch("/api/get-stores");
        if (!response.ok) throw new Error("error fetching stores");
        const data = await response.json();
        setStores(data.stores as StoreDocument[]);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    };
    fetchStores();
  }, []);

  console.log(stores);

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Header />
        <div className="flex justify-around">
          <Sidebar setItem={setItem} terminalName={stores} />
          {children}
        </div>
      </body>
    </html>
  );
}
